{"version":3,"sources":["components/Leaf/index.tsx","components/Leaf/Leaf.tsx","components/Tree/Tree.tsx","components/Tree/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Leaf","props","style","backgroundColor","background","transform","position","top","bottom","left","right","className","onClick","label","LeafGreen","LeafBrown","LeafRed","LeafYellow","Trunk","Tree","useState","buffer","push","buildLeaves","leaves","labeledLeaves","labels","slice","length","map","l","i","React","cloneElement","key","e","preventDefault","onSelected","handleClick","App","gift","getLabels","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAIeA,G,MCYF,SAACC,GACV,IAAMC,EAAQ,CACVC,gBAAiBF,EAAMG,WACvBC,UAAWJ,EAAMI,UACjBC,SAAUL,EAAMK,SAChBC,IAAKN,EAAMM,IACXC,OAAQP,EAAMO,OACdC,KAAMR,EAAMQ,KACZC,MAAOT,EAAMS,OAEjB,OACI,qBAAKC,UAAU,OAAOT,MAAOA,EAAOU,QAASX,EAAMW,QAAnD,SACI,mBAAGD,UAAU,aAAb,SACKV,EAAMY,YCdjBC,G,MAAY,SAACb,GAAD,OACd,cAAC,EAAD,2BACQA,GADR,IAEIK,SAAS,WACTF,WAAW,eAGbW,EAAY,SAACd,GAAD,OACd,cAAC,EAAD,2BACQA,GADR,IAEIK,SAAS,WACTF,WAAW,cAGbY,EAAU,SAACf,GAAD,OACZ,cAAC,EAAD,2BACQA,GADR,IAEIK,SAAS,WACTF,WAAW,cAGba,EAAa,SAAChB,GAAD,OACf,cAAC,EAAD,2BACQA,GADR,IAEIK,SAAS,WACTF,WAAW,cAGbc,EAAQ,SAACjB,GAAD,OACV,qBAAKU,UAAU,QAAQT,MAAO,CAC1BK,IAAKN,EAAMM,IACXE,KAAMR,EAAMQ,KACZJ,UAAW,8BC7CJc,EDmLF,SAAClB,GACV,IAD+B,EAQdmB,mBA3ID,WAChB,IAAIC,EAAiD,GA+HrD,OA9HAA,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,OACJE,KAAK,QACLJ,UAAU,+BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,OACJE,KAAK,QACLJ,UAAU,+BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,mBAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,OACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,OACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,OACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,gCAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGlBgB,EAAOC,KACH,cAAC,EAAD,CACIf,IAAI,QACJE,KAAK,QACLJ,UAAU,8BAGXgB,EAWmBE,IAAnBC,EARwB,oBAUzBC,EADSxB,EAAMyB,OAAOC,MAAM,EAAGH,EAAOI,QACfC,KAAI,SAACC,EAAGC,GAMjC,OALgBC,IAAMC,aAAaT,EAAOO,GAAI,CAC1CG,IAAKH,EACLlB,MAAOiB,EACPlB,QAAS,SAACuB,GAAD,OAbG,SAACA,EAAetB,GAChCsB,EAAEC,iBACEnC,EAAMoC,YACNpC,EAAMoC,WAAWxB,GAUWyB,CAAYH,EAAGL,SAKnD,OACI,qBAAKnB,UAAU,YAAf,SACI,sBAAKA,UAAU,OAAf,UACKc,EAED,cAAC,EAAD,CACIlB,IAAI,QACJE,KAAK,gBElLV8B,MAhBf,WACE,IADa,EAKInB,mBAbD,WAEhB,IADA,IAAIM,EAAS,GACJc,EAAO,IAAKA,EAAO,IAAMA,GAAQ,IACxCd,EAAOJ,KAAP,WAAgBkB,IAElB,OAAOd,EAQmBe,IAAnBf,EALM,oBAMb,OACE,qBAAKf,UAAU,MAAf,SACE,cAAC,EAAD,CACEe,OAAQA,EACRW,WATa,SAACxB,GAClB6B,QAAQC,IAAR,kBAAuB9B,EAAvB,wBCDW+B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3ece165a.chunk.js","sourcesContent":["import Leaf, { LeafProps } from './Leaf';\n\nexport type { LeafProps };\n\nexport default Leaf;\n","import { MouseEventHandler } from 'react';\nimport './Leaf.css';\nimport { Property } from 'csstype';\n\ninterface LeafProps {\n    label?: string;\n    background?: Property.Color;\n    transform?: Property.Transform;\n    position?: Property.Position;\n    top?: Property.Top;\n    bottom?: Property.Bottom;\n    left?: Property.Left;\n    right?: Property.Right;\n    onClick?: MouseEventHandler;\n}\n\nconst Leaf = (props: LeafProps) => {    \n    const style = {        \n        backgroundColor: props.background,\n        transform: props.transform,\n        position: props.position,\n        top: props.top,\n        bottom: props.bottom,\n        left: props.left,\n        right: props.right\n    };\n    return (\n        <div className=\"Leaf\" style={style} onClick={props.onClick}>            \n            <p className=\"Leaf-label\">\n                {props.label}\n            </p>\n        </div>\n    );\n}\n\nexport type { LeafProps };\n\nexport default Leaf;\n\n","import React, { useState, ReactElement, MouseEvent } from 'react';\nimport Leaf, { LeafProps } from '../Leaf';\nimport './Tree.css';\nimport { Property } from 'csstype';\n\ninterface TreeProps {\n    labels: string[]\n    onSelected?: (label: string) => void\n}\n\ninterface TrunkProps {\n    top: Property.Top\n    left: Property.Left\n}\n\nconst LeafGreen = (props: LeafProps) =>\n    <Leaf\n        {...props}\n        position='absolute'\n        background='#6EA061'\n        />;\n\nconst LeafBrown = (props: LeafProps) =>\n    <Leaf\n        {...props}\n        position='absolute'\n        background='#BC833C'\n        />;\n\nconst LeafRed = (props: LeafProps) =>\n    <Leaf\n        {...props}\n        position='absolute'\n        background='#FEA772'\n        />;\n\nconst LeafYellow = (props: LeafProps) =>\n    <Leaf\n        {...props}\n        position='absolute'\n        background='#FEDB7F'\n        />;\n\nconst Trunk = (props: TrunkProps) => \n    <div className=\"Trunk\" style={{\n        top: props.top,\n        left: props.left,\n        transform: \"scaleX(1.2) scaleY(3.0)\"\n    }} />;\n\nconst buildLeaves = () => {\n    let buffer: ReactElement<LeafProps, typeof Leaf>[] = [];\n    buffer.push(\n        <LeafBrown        \n            top='40px'\n            left='250px'\n            transform='rotate(110deg) scale(1.4)'        \n        />\n    );\n    buffer.push(\n        <LeafGreen\n            top='40px'\n            left='390px'\n            transform='rotate(-10deg) scale(1.4)'\n            />\n    );\n    buffer.push(\n        <LeafYellow\n            top='110px'\n            left='490px'\n            transform='rotate(20deg) scale(1.5)'\n            />\n    );\n    buffer.push(\n        <LeafYellow\n            top='110px'\n            left='490px'\n            transform='rotate(20deg) scale(1.5)'\n            />\n    );\n    buffer.push(\n        <LeafGreen\n            top='220px'\n            left='540px'\n            transform='rotate(30deg) scale(1.6)'\n            />\n    );\n    buffer.push(\n        <LeafRed\n            top='290px'\n            left='650px'\n            transform='rotate(46deg)'\n            />\n    );\n    buffer.push(\n        <LeafBrown\n            top='360px'\n            left='540px'\n            transform='rotate(55deg) scale(1.6)'\n            />\n    );\n    buffer.push(\n        <LeafGreen\n            top='450px'\n            left='420px'\n            transform='rotate(80deg) scale(1.4)'\n            />\n    );\n    buffer.push(\n        <LeafGreen\n            top='450px'\n            left='210px'\n            transform='rotate(20deg) scale(1.4)'\n            />\n    );\n    buffer.push(\n        <LeafYellow\n            top='380px'\n            left='90px'\n            transform='rotate(50deg) scale(1.2)'\n            />\n    );\n    buffer.push(\n        <LeafGreen\n            top='275px'\n            left='15px'\n            transform='rotate(40deg) scale(0.9)'\n            />\n    );\n    buffer.push(\n        <LeafGreen\n            top='170px'\n            left='60px'\n            transform='rotate(70deg) scale(1.5)'\n            />\n    );\n    buffer.push(\n        <LeafRed\n            top='100px'\n            left='150px'\n            transform='rotate(90deg) scale(1.4)'\n            />\n    );\n    buffer.push(\n        <LeafGreen\n            top='170px'\n            left='330px'\n            transform='rotate(10deg) scale(0.9)'\n            />\n    );\n    buffer.push(\n        <LeafRed\n            top='250px'\n            left='380px'\n            transform='rotate(-45deg) scale(0.95)'\n            />\n    );\n    buffer.push(\n        <LeafBrown\n            top='350px'\n            left='300px'\n            transform='rotate(45deg) scale(1.4)'\n            />\n    );\n    buffer.push(\n        <LeafRed\n            top='300px'\n            left='160px'\n            transform='rotate(45deg) scale(1.2)'\n            />\n    );\n    buffer.push(\n        <LeafYellow\n            top='240px'\n            left='250px'\n            transform='rotate(70deg) scale(1.0)'\n            />\n    );\n    return buffer;\n}\n    \nconst Tree = (props: TreeProps) => {    \n    const handleClick = (e: MouseEvent, label: string) => {\n        e.preventDefault();\n        if (props.onSelected) {\n            props.onSelected(label);\n        }\n    };\n    \n    const [leaves] = useState(buildLeaves());\n    const labels = props.labels.slice(0, leaves.length);\n    const labeledLeaves = labels.map((l, i) => {\n        const element = React.cloneElement(leaves[i], {\n            key: i,\n            label: l,\n            onClick: (e: MouseEvent) => handleClick(e, l),\n        });\n        return element;\n    });\n\n    return (\n        <div className=\"Container\">\n            <div className=\"Tree\">\n                {labeledLeaves}\n\n                <Trunk\n                    top='580px'\n                    left='320px'\n                    />\n            </div>\n        </div>\n    );\n}\n\nexport default Tree;","import Tree from './Tree';\n\nexport default Tree;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Tree from './components/Tree';\n\n// generate labels from A - 2\nconst getLabels = () => {\n  let labels = [];\n  for (var gift = 100; gift < 2000; gift += 100) {\n    labels.push(`$${gift}`)\n  }\n  return labels;\n};\n\nfunction App() {\n  const onSelected = (label: string) => {\n    console.log(`Gift of ${label} was selected`);\n  };\n\n  const [labels] = useState(getLabels());\n  return (\n    <div className=\"App\">\n      <Tree\n        labels={labels}\n        onSelected={onSelected}\n        />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}